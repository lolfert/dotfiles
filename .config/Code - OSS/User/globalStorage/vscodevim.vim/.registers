[["%",{"text":"main.c","registerMode":1}],["\"",{"text":"&","registerMode":1}],["1",{"text":"No problems were found with this implementation.","registerMode":2}],["2",{"text":"# Implementation 1","registerMode":2}],["0",{"text":"The `removeItem` function is not implemented correctly as 3 of 4 of its tests failed.","registerMode":2}],["-",{"text":"&","registerMode":1}],["3",{"text":"","registerMode":2}],["4",{"text":"","registerMode":2}],["5",{"text":"      assert(item != NULL);","registerMode":2}],["6",{"text":"      validateContainer(ctr);","registerMode":2}],["7",{"text":"            `TESTING: removeItem -> Attempting to remove 1 from set.\n            -- FAILURE: The symmetric difference between the original set and the new item is not equal to the resulting set.`\n\n            TESTING: removeItem -> Attempting to remove 0 from set.\n            -- FAILURE: The symmetric difference between the original set and the new item is not equal to the resulting set.\n\n            TESTING: removeItem -> Attempting to remove -1 from set.\n            -- FAILURE: The symmetric difference between the original set and the new item is not equal to the resulting set.`","registerMode":2}],["8",{"text":"TESTING: unionOf -> (Case: Empty Sets)","registerMode":2}],["9",{"text":"TESTING: insertItem -> Attempting to remove -1 from set.\n-- SUCCESS: The resulting set intersects with a set containing the item.","registerMode":2}],["/",{"text":"{","registerMode":0}],["#",{"text":"tasks","registerMode":1}]]